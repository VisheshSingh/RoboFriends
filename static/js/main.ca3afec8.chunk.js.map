{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","cardComponent","robots","map","robot","components_Card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflow","height","children","App","state","searchField","onSearchChange","e","_this","setState","target","value","_this2","this","fetch","then","res","json","users","_this$state","filteredRobots","filter","toLowerCase","includes","length","components_SearchBox","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oMAceA,EAbF,SAAAC,GAAS,IACZC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,MAAOC,EAAOH,EAAPG,GACrB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,4BAAAC,OAA8BN,EAA9B,YAA4CO,IAAI,WACxDN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,MCWGS,EAhBE,SAAAX,GAAS,IAGlBY,EAFaZ,EAAXa,OAEqBC,IAAI,SAAAC,GAC/B,OACEX,EAAAC,EAAAC,cAACU,EAAD,CACEb,GAAIY,EAAMd,KACVA,KAAMc,EAAMd,KACZC,MAAOa,EAAMb,MACbe,IAAKF,EAAMZ,OAIjB,OAAOC,EAAAC,EAAAC,cAAA,WAAMM,ICAAM,EAdG,SAAAlB,GAAS,IACjBmB,EAAiBnB,EAAjBmB,aACR,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,SACEC,UAAU,mCACVa,KAAK,SACLC,YAAY,2BACZC,SAAUH,MCRH,SAASI,EAAOvB,GAC7B,OACEI,EAAAC,EAAAC,cAAA,OACEkB,MAAO,CACLC,SAAU,SACVC,OAAQ,UAGT1B,EAAM2B,cCqCEC,6MAzCbC,MAAQ,CACNhB,OAAQ,GACRiB,YAAa,MAGfC,eAAiB,SAAAC,GACfC,EAAKC,SAAS,CACZJ,YAAaE,EAAEG,OAAOC,4FAIN,IAAAC,EAAAC,KAClBC,MAAM,8CACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GACJN,EAAKH,SAAS,CACZrB,OAAQ8B,uCAKP,IAAAC,EACyBN,KAAKT,MAA7BhB,EADD+B,EACC/B,OAAQiB,EADTc,EACSd,YACVe,EAAiBhC,EAAOiC,OAAO,SAAA/B,GACnC,OAAOA,EAAMd,KAAK8C,cAAcC,SAASlB,EAAYiB,iBAEvD,OAAsB,IAAlBlC,EAAOoC,OACF7C,EAAAC,EAAAC,cAAA,gCAGPF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,eACAH,EAAAC,EAAAC,cAAC4C,EAAD,CAAW/B,aAAcmB,KAAKP,iBAC9B3B,EAAAC,EAAAC,cAACiB,EAAD,KACEnB,EAAAC,EAAAC,cAAC6C,EAAD,CAAUtC,OAAQgC,aAnCVO,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.ca3afec8.chunk.js","sourcesContent":["import React from \"react\";\r\nconst Card = props => {\r\n  const { name, email, id } = props;\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img src={`https://www.robohash.org/${id}?200X200`} alt=\"robots\" />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = props => {\r\n  const { robots } = props;\r\n\r\n  const cardComponent = robots.map(robot => {\r\n    return (\r\n      <Card\r\n        id={robot.name}\r\n        name={robot.name}\r\n        email={robot.email}\r\n        key={robot.id}\r\n      />\r\n    );\r\n  });\r\n  return <div>{cardComponent}</div>;\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = props => {\r\n  const { searchChange } = props;\r\n  return (\r\n    <div className=\"tc pa2\">\r\n      <input\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"Search for your robot...\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nexport default function Scroll(props) {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflow: \"scroll\",\r\n        height: \"800px\"\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    robots: [],\r\n    searchField: \"\"\r\n  };\r\n\r\n  onSearchChange = e => {\r\n    this.setState({\r\n      searchField: e.target.value\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(res => res.json())\r\n      .then(users => {\r\n        this.setState({\r\n          robots: users\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { robots, searchField } = this.state;\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n    if (robots.length === 0) {\r\n      return <h1>Fetching robots...</h1>;\r\n    }\r\n    return (\r\n      <div className=\"tc\">\r\n        <h1 className=\"f1\">RoboFriends</h1>\r\n        <SearchBox searchChange={this.onSearchChange} />\r\n        <Scroll>\r\n          <CardList robots={filteredRobots} />\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}